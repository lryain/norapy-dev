#!/usr/bin/env python3
"""
clean_constrains.py

Scan the engine tree and remove constraints.txt files created by gen_constraints.py.

Usage:
  python3 clean_constrains.py            # interactive confirmation
  python3 clean_constrains.py -y         # delete without prompt
  python3 clean_constrains.py --dry-run  # show files that would be removed
  python3 clean_constrains.py --engine-root /path/to/engine
"""

import os
import sys
import argparse

# Keep default in sync with gen_constraints.py
ENGINE_ROOT = "/home/pi/dev/norapy-dev/engine"


def find_constraints(root: str):
    """Return list of constraint file paths under root where a package (setup.py/pyproject.toml) exists."""
    matches = []
    root = os.path.abspath(root)
    if not os.path.isdir(root):
        return matches
    for dirpath, dirnames, files in os.walk(root):
        # Only consider directories that look like package roots
        if "constraints.txt" in files and ("setup.py" in files or "pyproject.toml" in files):
            matches.append(os.path.join(dirpath, "constraints.txt"))
    return matches


def remove_files(paths, dry_run: bool = False):
    for p in paths:
        if dry_run:
            print("[DRY-RUN] Would remove:", p)
            continue
        try:
            os.remove(p)
            print("Removed:", p)
        except FileNotFoundError:
            print("Not found (skipped):", p)
        except PermissionError:
            print("Permission denied removing:", p, file=sys.stderr)
        except Exception as e:
            print(f"Failed to remove {p}: {e}", file=sys.stderr)


def main(argv=None):
    parser = argparse.ArgumentParser(description="Remove constraints.txt files generated by gen_constraints.py")
    parser.add_argument("--engine-root", default=ENGINE_ROOT,
                        help="Path to the engine root (default: %(default)s)")
    parser.add_argument("--dry-run", action="store_true", help="List files without deleting")
    parser.add_argument("-y", "--yes", action="store_true", help="Do not prompt for confirmation")
    args = parser.parse_args(argv)

    files = find_constraints(args.engine_root)
    if not files:
        print("No constraints.txt files found under:", args.engine_root)
        return 0

    print(f"Found {len(files)} constraints.txt files under {args.engine_root}:")
    for f in files:
        print("  -", f)

    if args.dry_run:
        print("Dry run mode; nothing will be deleted.")
        return 0

    if not args.yes:
        try:
            ans = input("Delete these files? [y/N]: ").strip().lower()
        except EOFError:
            ans = "n"
        if ans not in ("y", "yes"):
            print("Aborted by user.")
            return 1

    remove_files(files, dry_run=False)
    return 0


if __name__ == "__main__":
    sys.exit(main())
